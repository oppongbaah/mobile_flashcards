{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/isaac/Documents/React Native/Project/vm/mobile-flashcards/src/Components/Dashboard.js\";\n\nimport React, { useEffect } from 'react';\nimport viewDashboard from \"../screens/dashboard\";\nimport { connect } from 'react-redux';\nimport { getAllDecks } from \"../store/middleware\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as colors from \"../utils/colors\";\n\nvar Dashboard = function Dashboard(_ref) {\n  var status = _ref.status,\n      loadDecks = _ref.loadDecks,\n      navigation = _ref.navigation;\n  useEffect(function () {\n    loadDecks();\n  }, []);\n  return status === \"failed\" ? React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, \" Could not load decks. Please check your internet connection and try again \") : React.createElement(React.Fragment, null, status === \"loaded\" ? viewDashboard(navigation) : React.createElement(ActivityIndicator, {\n    color: colors.secondary,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    status: state.decks.payload.status\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    loadDecks: function loadDecks() {\n      return dispatch(getAllDecks());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"sources":["/home/isaac/Documents/React Native/Project/vm/mobile-flashcards/src/Components/Dashboard.js"],"names":["React","useEffect","viewDashboard","connect","getAllDecks","colors","Dashboard","status","loadDecks","navigation","secondary","mapStateToProps","state","decks","payload","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,aAAP;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR;;;AAEA,OAAO,KAAKC,MAAZ;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAqC;AAAA,MAAnCC,MAAmC,QAAnCA,MAAmC;AAAA,MAA3BC,SAA2B,QAA3BA,SAA2B;AAAA,MAAhBC,UAAgB,QAAhBA,UAAgB;AAEnDR,EAAAA,SAAS,CAAC,YAAM;AACZO,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,SACID,MAAM,KAAK,QAAX,GAEA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAFA,GAIA,0CAEQA,MAAM,KAAK,QAAX,GAEAL,aAAa,CAACO,UAAD,CAFb,GAIA,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAEJ,MAAM,CAACK,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANR,CALJ;AAeH,CArBD;;AAuBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACLL,IAAAA,MAAM,EAAEK,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBP;AADvB,GAAP;AAGH,CAJD;;AAMA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACrC,SAAO;AACHR,IAAAA,SAAS,EAAE;AAAA,aAAMQ,QAAQ,CAACZ,WAAW,EAAZ,CAAd;AAAA;AADR,GAAP;AAGH,CAJD;;AAMA,eAAeD,OAAO,CAACQ,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CT,SAA7C,CAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport viewDashboard from '../screens/dashboard';\nimport {connect} from 'react-redux';\nimport {getAllDecks} from '../store/middleware';\nimport {ActivityIndicator, Text} from 'react-native';\nimport * as colors from '../utils/colors';\n\nconst Dashboard = ({status, loadDecks, navigation}) => {\n\n    useEffect(() => {\n        loadDecks();\n    }, [])\n\n    return (\n        status === \"failed\"\n        ?\n        <Text> Could not load decks. Please check your internet connection and try again </Text>\n        :\n        <>\n            {\n                status === \"loaded\"\n                ?\n                viewDashboard(navigation)\n                :\n                <ActivityIndicator color={colors.secondary} />\n            }\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n      status: state.decks.payload.status\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loadDecks: () => dispatch(getAllDecks())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);"]},"metadata":{},"sourceType":"module"}