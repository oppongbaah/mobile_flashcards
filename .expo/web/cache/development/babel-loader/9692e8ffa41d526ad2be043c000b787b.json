{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actions from \"./actions\";\nvar initialState = {\n  payload: {\n    data: [],\n    status: ''\n  }\n};\nexport default deckRed = function deckRed() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actions.FETCH_DECKS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        payload: {\n          data: action.payload.deck,\n          status: action.payload.status\n        }\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/isaac/Documents/React Native/Project/vm/mobile-flashcards/src/store/reducers.js"],"names":["actions","initialState","payload","data","status","deckRed","state","action","type","FETCH_DECKS","deck"],"mappings":";;;;;;AAAA,OAAO,KAAKA,OAAZ;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAG;AAACC,IAAAA,IAAI,EAAC,EAAN;AAAUC,IAAAA,MAAM,EAAC;AAAjB;AADO,CAArB;AAIA,eAAeC,OAAO,GAAG,mBAAkC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AACvD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,OAAO,CAACS,WAAb;AACI,6CAAWH,KAAX;AAAkBJ,QAAAA,OAAO,EACrB;AACIC,UAAAA,IAAI,EAAEI,MAAM,CAACL,OAAP,CAAeQ,IADzB;AAEIN,UAAAA,MAAM,EAAEG,MAAM,CAACL,OAAP,CAAeE;AAF3B;AADJ;;AAMJ;AACI,aAAOE,KAAP;AATR;AAWH,CAZD","sourcesContent":["import * as actions from './actions';\n\nconst initialState = {\n    payload : {data:[], status:''}\n}\n\nexport default deckRed = (state = initialState, action) => {\n    switch (action.type) {\n        case actions.FETCH_DECKS:\n            return {...state, payload:\n                {\n                    data: action.payload.deck,\n                    status: action.payload.status\n                }\n            }\n        default:\n            return state;\n    }\n}\n  "]},"metadata":{},"sourceType":"module"}